Traffic Flow Analysis
Description
This Python project analyzes traffic flow in a video by detecting and tracking vehicles across three distinct lanes. The system uses a pre-trained COCO model (YOLOv8) for vehicle detection and counts vehicles per lane in real-time. It generates visual overlays, CSV logs, and a summary report.
## Features
- **Vehicle Detection:** Detect cars, buses, and trucks using YOLOv8.
- **Lane Definition and Counting:** Define three lanes and count vehicles in each separately.
- **Vehicle Tracking:** Track vehicles across frames to avoid duplicate counts.
- **Real-time Processing:** Optimized for smooth performance on standard hardware.
- **Outputs:**
  - CSV log with Vehicle ID, lane, frame number, and bounding box coordinates.
  - Annotated video with bounding boxes, IDs, and lane counters.
  - Summary JSON with total vehicle counts per lane.
## Requirements
- Python 3.10+
- Packages:
  - `ultralytics`
  - `opencv-python`
  - `numpy`
  - `yt-dlp`
  - `sort` (if using SORT tracker)
- Pre-trained YOLOv8 model (`yolov8n.pt`)
## Project Structure
Traffic project/
│── .vscode/
│── input\_video/
│   └── (YouTube video downloaded automatically)
│── output/
│   ├── annotated.mp4
│   ├── vehicle\_log.csv
│   └── summary.json
│── lanes.json
│── traffic\_flow\_final.py
│── yolov8n.pt
│── Requirement.txt
│── ReadMe.txt
## Usage
1. Clone the repository:
git clone [https://github.com/shawrahul876-wq/Traffic-Flow-Analysis.git](https://github.com/shawrahul876-wq/Traffic-Flow-Analysis.git)
cd Traffic-Flow-Analysis
2. Install dependencies:
pip install -r Requirement.txt
3. Run the script:
python traffic\_flow\_final.py --source "[https://www.youtube.com/watch?v=MNn9qKG2UFI](https://www.youtube.com/watch?v=MNn9qKG2UFI)" --lanes lanes.json --save-video --csv
4. Outputs will be saved in the `output/` folder.
## Demo Video
A short 9-second video showcasing the Traffic Flow Analysis system:
- Vehicle Detection: Cars, buses, and trucks detected with bounding boxes.
- Lane Counting: Vehicles correctly assigned to their respective lanes.
- Vehicle Tracking: Smooth tracking across frames without duplicate counts.
- Real-Time Overlay: Lane boundaries, vehicle IDs, and counters displayed.
- Summary: Final screen shows total vehicles per lane.
**Watch the Demo:** [Demo Video Link](https://drive.google.com/drive/folders/1oNPUgzty932bzc6ET_lw6_13lP0DatJC?usp=drive_link)
## Evaluation Criteria
- Accuracy of vehicle detection
- Correct lane assignment and counting
- Code quality and documentation clarity
- Efficiency and real-time performance
## Submission
- GitHub repository containing all code, documentation, and demo video
- Include a brief technical summary detailing the approach, challenges, and solutions
